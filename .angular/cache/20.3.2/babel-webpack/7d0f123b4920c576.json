{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { HttpEventType } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormsModule, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs';\nlet AddProductReactiveComponent = class AddProductReactiveComponent {\n  constructor(fb, productService) {\n    this.fb = fb;\n    this.productService = productService;\n    this.categories = [];\n    this.subcategories = [];\n    this.images = [];\n    this.previewUrls = [];\n    this.maxImages = 4;\n    this.uploading = false;\n    this.uploadProgress = 0;\n    this.errorMsg = '';\n    this.productForm = this.fb.group({\n      name: ['', [Validators.required, Validators.maxLength(120)]],\n      description: ['', [Validators.maxLength(2000)]],\n      size: [''],\n      color: [''],\n      pricePerDay: [null, [Validators.min(0)]],\n      priceForSale: [null, [Validators.min(0)]],\n      available: [true, Validators.required],\n      categoryId: [null, Validators.required],\n      subcategoryId: [null, Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadCategories();\n    // when category changes, fetch subcategories\n    this.productForm.get('categoryId')?.valueChanges.subscribe(catId => {\n      this.subcategories = [];\n      this.productForm.get('subcategoryId')?.setValue(null);\n      if (catId) {\n        this.loadSubcategories(catId);\n      }\n    });\n  }\n  loadCategories() {\n    this.productService.getCategories().subscribe({\n      next: cats => this.categories = cats,\n      error: () => this.categories = []\n    });\n  }\n  loadSubcategories(categoryId) {\n    this.productService.getSubcategories(categoryId).subscribe({\n      next: subs => this.subcategories = subs,\n      error: () => this.subcategories = []\n    });\n  }\n  onImageSelect(event) {\n    this.errorMsg = '';\n    const input = event.target;\n    if (!input.files) return;\n    const selected = Array.from(input.files);\n    if (this.images.length + selected.length > this.maxImages) {\n      this.errorMsg = `Maximum ${this.maxImages} images allowed.`;\n      return;\n    }\n    selected.forEach(file => {\n      // basic image type check\n      if (!file.type.startsWith('image/')) return;\n      this.images.push(file);\n      const reader = new FileReader();\n      reader.onload = e => this.previewUrls.push(e.target.result);\n      reader.readAsDataURL(file);\n    });\n    // reset input to allow same-file reselect if user removed\n    input.value = '';\n  }\n  removeImage(index) {\n    this.images.splice(index, 1);\n    this.previewUrls.splice(index, 1);\n  }\n  // Build the FormData payload: product JSON + images[]\n  buildFormData() {\n    const formData = new FormData();\n    // product json as 'product' part (server expects this name — adjust if needed)\n    const productPayload = {\n      name: this.productForm.value.name,\n      description: this.productForm.value.description,\n      size: this.productForm.value.size,\n      color: this.productForm.value.color,\n      pricePerDay: this.productForm.value.pricePerDay,\n      priceForSale: this.productForm.value.priceForSale,\n      available: this.productForm.value.available,\n      categoryId: this.productForm.value.categoryId,\n      subcategoryId: this.productForm.value.subcategoryId\n      // add userId server side or include if required\n    };\n    formData.append('product', new Blob([JSON.stringify(productPayload)], {\n      type: 'application/json'\n    }));\n    this.images.forEach((file, idx) => {\n      // server should accept images as 'images' or 'images[]' — adjust name if needed\n      formData.append('images', file, file.name);\n    });\n    return formData;\n  }\n  submit() {\n    this.errorMsg = '';\n    if (this.productForm.invalid) {\n      this.productForm.markAllAsTouched();\n      return;\n    }\n    if (this.images.length === 0) {\n      this.errorMsg = 'Please upload at least one image.';\n      return;\n    }\n    const formData = this.buildFormData();\n    this.uploading = true;\n    this.uploadProgress = 0;\n    this.productService.createProduct(formData).pipe(finalize(() => this.uploading = false)).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.uploadProgress = Math.round(100 * (event.loaded / event.total));\n        } else if (event.type === HttpEventType.Response) {\n          // Success\n          console.log('Upload response', event.body);\n          // reset form & previews\n          this.productForm.reset({\n            available: true\n          });\n          this.images = [];\n          this.previewUrls = [];\n          this.uploadProgress = 0;\n          // show success UI (toast / redirect)\n          alert('Product created successfully');\n        }\n      },\n      error: err => {\n        console.error(err);\n        this.errorMsg = 'Upload failed. Try again.';\n      }\n    });\n  }\n  // convenience getters for template\n  get f() {\n    return this.productForm.controls;\n  }\n};\nAddProductReactiveComponent = __decorate([Component({\n  selector: 'app-add-product',\n  standalone: true,\n  // <-- important\n  imports: [FormsModule],\n  // <-- for ngModel\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.scss']\n})], AddProductReactiveComponent);\nexport { AddProductReactiveComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}