{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/user-service\";\nimport * as i3 from \"@angular/router\";\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class RegisterComponent {\n    constructor(fb, userService, router) {\n      this.fb = fb;\n      this.userService = userService;\n      this.router = router;\n      this.submitted = false;\n      this.showPassword = false;\n      this.registerForm = this.fb.group({\n        name: ['', [Validators.required, Validators.minLength(3)]],\n        email: ['', [Validators.required, Validators.email]],\n        phoneNumber: ['', [Validators.required, Validators.pattern(/^[6-9]\\d{9}$/)]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required],\n        address: [''],\n        locationId: [null, Validators.required],\n        roleId: [2, Validators.required],\n        // default roleId (e.g., user)\n        status: ['ACTIVE']\n      }, {\n        validators: this.passwordMatchValidator\n      });\n    }\n    // Password match validator\n    passwordMatchValidator(form) {\n      const password = form.get('password')?.value;\n      const confirm = form.get('confirmPassword')?.value;\n      return password === confirm ? null : {\n        mismatch: true\n      };\n    }\n    // Toggle password visibility\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    }\n    // Handle image selection\n    onFileChange(event) {\n      if (event.target.files && event.target.files.length > 0) {\n        this.selectedImage = event.target.files[0];\n      }\n    }\n    // Submit form\n    onSubmit() {\n      this.submitted = true;\n      if (this.registerForm.invalid) return;\n      const user = {\n        ...this.registerForm.value\n      };\n      delete user.confirmPassword; // Remove confirmPassword before sending\n      this.userService.signup(user, this.selectedImage).subscribe({\n        next: res => {\n          alert('Registration successful!');\n          this.router.navigate(['/login']);\n        },\n        error: err => {\n          console.error(err);\n          alert('Registration failed! Try again.');\n        }\n      });\n    }\n    get f() {\n      return this.registerForm.controls;\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function RegisterComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router));\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 3,\n      vars: 0,\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵdomElementStart(0, \"div\")(1, \"h3\");\n          i0.ɵɵtext(2, \"Register Page\");\n          i0.ɵɵdomElementEnd()();\n        }\n      },\n      encapsulation: 2\n    }));\n  }\n  _staticBlock();\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}