{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/user-service\";\nimport * as i3 from \"@angular/router\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class LoginComponent {\n    constructor(fb, userService, router) {\n      this.fb = fb;\n      this.userService = userService;\n      this.router = router;\n      this.showPassword = false;\n      this.loading = false;\n      this.serverError = null;\n    }\n    ngOnInit() {\n      this.loginForm = this.fb.group({\n        username: ['', [Validators.required, this.emailOrMobileValidator]],\n        password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(10)]],\n        rememberMe: [false]\n      });\n      // If credentials were saved (remember me), load them\n      const savedUsername = localStorage.getItem('saved_username');\n      const savedPassword = localStorage.getItem('saved_password');\n      const savedRemember = localStorage.getItem('saved_remember');\n      if (savedUsername && savedPassword && savedRemember === 'true') {\n        this.loginForm.patchValue({\n          username: savedUsername,\n          password: savedPassword,\n          rememberMe: true\n        });\n      }\n    }\n    // Custom validator: either a valid email OR a numeric mobile with up to 10 digits (and at least 6 to be reasonable)\n    emailOrMobileValidator(control) {\n      const v = (control.value || '').toString().trim();\n      if (!v) return null;\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n      const mobileRegex = /^[0-9]{1,10}$/; // 1 to 10 digits allowed, will later show message if too short maybe\n      if (emailRegex.test(v)) return null;\n      if (mobileRegex.test(v)) return null;\n      return {\n        emailOrMobile: true\n      };\n    }\n    // Convenience getters\n    get username() {\n      return this.loginForm.get('username');\n    }\n    get password() {\n      return this.loginForm.get('password');\n    }\n    get rememberMe() {\n      return this.loginForm.get('rememberMe');\n    }\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    }\n    onSubmit() {\n      this.serverError = null;\n      if (this.loginForm.invalid) {\n        this.loginForm.markAllAsTouched();\n        return;\n      }\n      const credentials = {\n        username: this.username.value,\n        password: this.password.value\n      };\n      this.loading = true;\n      this.userService.login(credentials).pipe(finalize(() => this.loading = false)).subscribe({\n        next: res => {\n          // Assuming res contains data structure like { data: { token: '...', ... }, message: '...' }\n          // Save username/password/token to localStorage per user's request.\n          if (this.rememberMe.value) {\n            localStorage.setItem('saved_username', credentials.username);\n            localStorage.setItem('saved_password', credentials.password);\n            localStorage.setItem('saved_remember', 'true');\n          } else {\n            localStorage.removeItem('saved_username');\n            localStorage.removeItem('saved_password');\n            localStorage.removeItem('saved_remember');\n          }\n          // Save token if available — per your instruction token storage should be commented out for now.\n          // if (res && res.data && res.data.token) {\n          //   localStorage.setItem('auth_token', res.data.token);\n          // }\n          // For now, if backend returns user details, you can store them or navigate:\n          // localStorage.setItem('user', JSON.stringify(res.data.user));\n          // Navigate to dashboard or home after successful login\n          // this.router.navigate(['/dashboard']);\n          console.log('Login response', res);\n        },\n        error: err => {\n          console.error('Login failed', err);\n          this.serverError = err?.error?.message || err?.message || 'Login failed. Please try again.';\n        }\n      });\n    }\n    onForgotPassword() {\n      // navigate to forgot password page or open modal\n      // this.router.navigate(['/forgot-password']);\n      console.log('Forgot password clicked');\n    }\n    goToRegister() {\n      this.router.navigate(['/register']);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.Router));\n    }, this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 0,\n      vars: 0,\n      template: function LoginComponent_Template(rf, ctx) {},\n      encapsulation: 2\n    }));\n  }\n  _staticBlock();\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}